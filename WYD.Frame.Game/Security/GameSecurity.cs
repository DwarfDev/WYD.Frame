using System.Text;

namespace WYD.Frame.Game.Security;

public class GameSecurity
{
    private static readonly byte[] Keytable =
    {
        0x14, 0x17, 0x47, 0x67, 0x7A, 0x09, 0x21, 0x0D, 0x5B, 0x5B, 0x15, 0x0D, 0x17, 0x11, 0x21, 0x0C, 0x1F, 0x03,
        0x21, 0x21, 0x17, 0x0D, 0x1D, 0x0D, 0x16, 0x1F, 0x03, 0x1F, 0x71, 0x6D, 0x15, 0x0D, 0x15, 0x0D, 0x15, 0x13,
        0x17, 0x2C, 0x15, 0x43, 0x1D, 0x72, 0x17, 0x29, 0x1F, 0x09, 0x15, 0x16, 0x47, 0x0D, 0x67, 0x6D, 0x79, 0x0D,
        0x67, 0x0D, 0x15, 0x09, 0x15, 0x0D, 0x1F, 0x71, 0x17, 0x0E, 0x33, 0x17, 0x05, 0x09, 0x6F, 0x73, 0x5B, 0x13,
        0x33, 0x32, 0x3E, 0x1E, 0x24, 0x0D, 0x6E, 0x0E, 0x15, 0x0A, 0x15, 0x3F, 0x5D, 0x0D, 0x17, 0x35, 0x17, 0x0D,
        0x71, 0x0D, 0x18, 0x0D, 0x25, 0x21, 0x33, 0x0D, 0x17, 0x0C, 0x1D, 0x0A, 0x15, 0x17, 0x27, 0x0C, 0x15, 0x0D,
        0x3C, 0x10, 0x4B, 0x09, 0x14, 0x2B, 0x6B, 0x35, 0x67, 0x1F, 0x15, 0x1F, 0x15, 0x0E, 0x15, 0x10, 0x15, 0x28,
        0x05, 0x2D, 0x33, 0x2A, 0x1D, 0x29, 0x17, 0x0C, 0x15, 0x0D, 0x14, 0x0D, 0x15, 0x0E, 0x77, 0x27, 0x1D, 0x1F,
        0x15, 0x0B, 0x7A, 0x0D, 0x3D, 0x10, 0x3D, 0x0D, 0x47, 0x3F, 0x1D, 0x0D, 0x79, 0x4D, 0x15, 0x0D, 0x17, 0x47,
        0x33, 0x0D, 0x77, 0x47, 0x33, 0x1C, 0x17, 0x0E, 0x15, 0x35, 0x0D, 0x06, 0x45, 0x49, 0x1D, 0x7F, 0x33, 0x0D,
        0x17, 0x2B, 0x15, 0x1C, 0x71, 0x31, 0x1D, 0x0F, 0x17, 0x0D, 0x14, 0x0A, 0x14, 0x0B, 0x71, 0x16, 0x78, 0x7F,
        0x61, 0x09, 0x15, 0x29, 0x63, 0x25, 0x53, 0x57, 0x29, 0x0D, 0x77, 0x1C, 0x47, 0x0C, 0x33, 0x0D, 0x15, 0x0D,
        0x5B, 0x09, 0x31, 0x35, 0x17, 0x0D, 0x29, 0x0D, 0x1D, 0x0D, 0x25, 0x21, 0x33, 0x0D, 0x17, 0x0C, 0x15, 0x0A,
        0x15, 0x3F, 0x5D, 0x0D, 0x17, 0x0D, 0x79, 0x4D, 0x15, 0x0D, 0x25, 0x09, 0x15, 0x0D, 0x51, 0x0B, 0x7A, 0x0D,
        0x47, 0x0D, 0x15, 0x0D, 0x15, 0x0D, 0x1D, 0x0D, 0x79, 0x03, 0x15, 0x09, 0x15, 0x0D, 0x67, 0x0D, 0x15, 0x71,
        0x49, 0x71, 0x1F, 0x75, 0x15, 0x16, 0x3D, 0x0D, 0x67, 0x6D, 0x33, 0x1E, 0x76, 0x0D, 0x6E, 0x0E, 0x3E, 0x1E,
        0x1F, 0x71, 0x19, 0x0E, 0x33, 0x0D, 0x05, 0x09, 0x33, 0x71, 0x5B, 0x13, 0x1C, 0x1F, 0x15, 0x0B, 0x15, 0x0E,
        0x1F, 0x10, 0x15, 0x28, 0x05, 0x0A, 0x15, 0x2A, 0x1D, 0x71, 0x1F, 0x0C, 0x19, 0x1C, 0x15, 0x1B, 0x33, 0x79,
        0x17, 0x0B, 0x33, 0x1C, 0x2F, 0x47, 0x31, 0x0A, 0x18, 0x0E, 0x1F, 0x35, 0x0D, 0x10, 0x47, 0x49, 0x28, 0x4F,
        0x5B, 0x29, 0x15, 0x35, 0x21, 0x10, 0x17, 0x11, 0x17, 0x0C, 0x1F, 0x03, 0x21, 0x21, 0x14, 0x17, 0x47, 0x67,
        0x16, 0x09, 0x71, 0x6D, 0x15, 0x0A, 0x03, 0x2B, 0x15, 0x0D, 0x1D, 0x13, 0x17, 0x2C, 0x15, 0x43, 0x17, 0x0D,
        0x15, 0x1F, 0x17, 0x0D, 0x1D, 0x0D, 0x06, 0x0E, 0x17, 0x0D, 0x18, 0x29, 0x19, 0x05, 0x61, 0x6D, 0x15, 0x0D,
        0x1B, 0x53, 0x7A, 0x0A, 0x67, 0x40, 0x1D, 0x0D, 0x17, 0x35, 0x17, 0x0C, 0x03, 0x0E, 0x0D, 0x16, 0x17, 0x33,
        0x15, 0x20, 0x67, 0x6F, 0x7D, 0x35, 0x71, 0x0A, 0x15, 0x33, 0x7A, 0x0E, 0x15, 0x28, 0x3D, 0x09, 0x16, 0x0D,
        0x15, 0x0D, 0x67, 0x0D, 0x71, 0x0A, 0x05, 0x0D, 0x15, 0x40, 0x3B, 0x47, 0x71, 0x0A, 0x17, 0x09, 0x14, 0x0D,
        0x03, 0x03, 0x17, 0x0D, 0x33, 0x0D, 0x79, 0x0D, 0x15, 0x0E, 0x12, 0x0D, 0x6D, 0x3D, 0x17, 0x09, 0x77, 0x09,
        0x3D, 0x0C, 0x33, 0x6A, 0x17, 0x1D, 0x1D, 0x0B, 0x77, 0x09, 0x2B, 0x0D, 0x67, 0x1F, 0x15, 0x0D, 0x1D, 0x44,
        0x1F, 0x0D, 0x3D, 0x17, 0x79, 0x0C, 0x15, 0x10, 0x15, 0x09, 0x1A, 0x53, 0x77, 0x35, 0x78, 0x7B, 0x1D, 0x04,
        0x20, 0x03, 0x43, 0x27, 0x1D, 0x47, 0x31, 0x29
    };

    private static readonly byte[] LoginKeys =
    {
        0x3F, 0xDA, 0x10, 0xD6, 0xEA, 0x75, 0x39, 0x5F, 0x2A, 0x6B, 0x31, 0x7D, 0x02, 0x02, 0x79, 0x5C, 0x1A, 0x72,
        0x91, 0x9A, 0x21, 0x6D
    };

    public static byte[] DecodeLogin(byte[] payload)
    {
        for (var k = 0; k < payload.Length; k++) payload[k] += LoginKeys[payload.Length - 1 - k];

        return payload;
    }

    public static byte[] EncodeLogin(string str, int sizeConst)
    {
        var original = Encoding.UTF8.GetBytes(str);
        var payload = new byte[sizeConst];

        original.CopyTo(payload, 0);
        for (var k = 0; k < payload.Length; k++) payload[k] -= LoginKeys[sizeConst - 1 - k];

        return payload;
    }

    public static void Encrypt(ref byte[] pBuffer)
    {
        byte checksumEnc = 0;
        byte checksumDec = 0;
        byte keyResult = 0;
        var hashKey = pBuffer[2];
        var keyIncrement = (uint)(Keytable[hashKey * 2] & 0xFF); // & 0xFF

        for (uint i = 4, loopIterator = 0; i < BitConverter.ToInt16(pBuffer, 0); i++, keyIncrement++)
        {
            checksumDec += pBuffer[i];
            keyResult = Keytable[(keyIncrement & 0x800000FF) * 2 + 1];
            loopIterator = i & 3;

            switch (loopIterator)
            {
                case 0:
                    pBuffer[i] += (byte)(keyResult * 2);
                    break;

                case 1:
                    pBuffer[i] -= (byte)(keyResult >> 3);
                    break;

                case 2:
                    pBuffer[i] += (byte)(keyResult * 4);
                    break;

                case 3:
                    pBuffer[i] -= (byte)(keyResult >> 5);
                    break;
            }

            checksumEnc += pBuffer[i];
        }

        pBuffer[3] = (byte)(checksumEnc - checksumDec);
    }

    public static int Decrypt(byte[] pBuffer)
    {
        try
        {
            var offset = GetInitialOffset(pBuffer);
            uint keyIncrement = Keytable[pBuffer[2 + offset] * 2], keyResult = 0;
            byte checksumEnc = 0, checksumDec = 0;

            for (int i = 4, thisIterator = 0; i < BitConverter.ToInt16(pBuffer, offset); i++, keyIncrement++)
            {
                checksumEnc += pBuffer[i + offset];
                keyResult = Keytable[(keyIncrement & 0x800000FF) * 2 + 1];
                thisIterator = i & 3;

                switch (thisIterator)
                {
                    case 0:
                        pBuffer[i + offset] -= (byte)(keyResult << 1);
                        break;

                    case 1:
                        pBuffer[i + offset] += (byte)((int)keyResult >> 3);
                        break;

                    case 2:
                        pBuffer[i + offset] -= (byte)(keyResult << 2);
                        break;

                    case 3:
                        pBuffer[i + offset] += (byte)((int)keyResult >> 5);
                        break;
                }

                checksumDec += pBuffer[i + offset];
            }

            if (pBuffer[3 + offset] != (byte)(checksumEnc - checksumDec)) offset = -1;

            return offset;
        }
        catch
        {
            return -1;
        }
    }

    private static unsafe int GetInitialOffset(byte[] Buffer)
    {
        var iOffset = 0;

        fixed (byte* pBuffer = Buffer)
        {
            if (*(int*)pBuffer == 0x1F11F311 && *(short*)&pBuffer[4] == 0x74) iOffset = 4;
        }

        return iOffset;
    }

    public static byte NextKey(byte[]? serverKeys, int currentKeyIndex, bool addionalSecurity)
    {
        if (!addionalSecurity) return GetHashByte();
        if (serverKeys is null || serverKeys.Length == 0) return GetHashByte();

        int hashKey;

        if (currentKeyIndex < 16)
            if (serverKeys[currentKeyIndex] == 0)
                return serverKeys[currentKeyIndex];

        if (currentKeyIndex > 15)
        {
            var testKey = serverKeys[15] & 0x80000001;
            if (testKey == 0)
            {
                //Sum 1,3,5
                hashKey = serverKeys[1] + serverKeys[3];
                hashKey = serverKeys[5] + hashKey - 0x57;
                hashKey = hashKey ^ 0xFF;
            }
            else if (testKey == 1)
            {
                //Essa parte não foi testada..
                //Sum 2D, 2B, 29
                hashKey = serverKeys[0xD] + serverKeys[0xB];
                hashKey = hashKey - serverKeys[0x9] + 0x4;
                hashKey = hashKey ^ 0xFF;
            }
            else
            {
                hashKey = 0xFF;
                Console.WriteLine("Something went wrong...");
            }
        }
        else
        {
            hashKey = serverKeys[currentKeyIndex] ^ 0xFF;
        }

        return (byte)hashKey;
    }

    private static int GetHash()
    {
        var hash = DateTime.Now.Millisecond;

        hash *= 0x343FD;
        hash += 0x269EC3;

        hash >>= 10;

        hash &= 0x7FFF;

        return hash;
    }

    private static byte GetHashByte()
    {
        byte bHash = 0;

        bHash = (byte)(GetHash() & 0x800000FF);

        bHash &= 0xFF;

        return bHash;
    }
}